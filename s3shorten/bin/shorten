#!/usr/bin/env ruby
#
# Copyright (c) 2014 Mark Harrison
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
# URL shortener using S3
#
# Setup:
#
# - Requirements - a domain used for shortening, hosted with route 53.
#
# - Create an S3 bucket with the name of your shortener domain
# - Enable static web hosting for the S3 bucket
# - Note the hostname for the website hosting:
#       bucket.name.s3-website-us-east-1.amazonaws.com
# - In route 53, add an alias record for the shortener domain, and pick the S3
#   bucket from the list of available options.
#
# - Create ~/.aws/credentials if it doesn't already exist to store your AWS
#   credentials. This is the same format as used for the AWS CLI. If you don't
#   already use the AWS cli, it look like:
#
#       [default]
#       aws_access_key_id = AKIA...
#       aws_secret_access_key = ....
#
# - Create ~/.s3shorten:
#
#   bucket 'yourdomain.com'
#   profile 'default'
#
# - Change the bucket to the name of your S3 bucket created before
# - If you used an alternative profile in your credentials file (i.e. you
#   added a section called '[profile myprofile]' to the aws credentials file,
#   then change the profile setting in ~/.s3shorten to match.

require 'mixlib/config'
require 'aws-sdk'
require 'securerandom'

if ARGV[0].nil?
  puts "Usage: #{File.basename($0)} URL [KEY] -- Shorten URL"
  puts "       #{File.basename($0)} -r KEY    -- Remove shortened URL"
  puts "       #{File.basename($0)} -l        -- List shortened URLs"
  exit -1
end

if ARGV[1].nil?
  # Generate random key
  ARGV[1] = SecureRandom.urlsafe_base64(6)
end

module MyConfig
  extend Mixlib::Config
  config_strict_mode true
  default :profile, 'default'
  default :bucket,  'mybucket'
end
MyConfig.from_file(File.expand_path('~/.s3shorten'))

# The default AWS credentials loader looks in this variable for the AWS
# and this looks to be the least intrusive way to set it.
if MyConfig.profile != 'default'
  ENV['AWS_PROFILE'] ||= "profile #{MyConfig.profile}"
end

s3 = AWS::S3.new
b = s3.buckets[MyConfig.bucket]
# If we pass a full URL for the short URL, extract just the key
ARGV[1] = ARGV[1].sub("http://#{MyConfig.bucket}/", "")
o = b.objects[ARGV[1]]
url = "http://#{MyConfig.bucket}/#{ARGV[1]}"
# Remove entries with -r
if ARGV[0] == '-r'
  if o.exists?
    o.delete
    puts "Deleted: #{url}"
  else
    puts "#{url} doesn't exist"
    exit 1
  end
elsif ARGV[0] == '-l'
  b.objects.each do |o|
    puts "http://#{o.bucket.name}/#{o.key} => #{o.head[:website_redirect_location]}"
  end
else
  ARGV[0] = "http://#{ARGV[0]}" unless ARGV[0].match('^https?://')
  o.write('', :website_redirect_location => ARGV[0], :acl => :public_read)
  puts url
end
